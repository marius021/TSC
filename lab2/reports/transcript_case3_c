# 1
# Model Technology ModelSim - Intel FPGA Edition vlog 10.5b Compiler 2016.10 Oct  5 2016
# Start time: 17:34:04 on Apr 23,2024
# vlog -sv -timescale 1ps/1ps -work work -f sources.txt 
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling module instr_register_test
# ** Warning: ../lab01_testbench-interface/instr_register_test.sv(104): (vlog-2240) Treating stand-alone use of function 'final_report' as an implicit VOID cast.
# ** Warning: ../lab01_testbench-interface/instr_register_test.sv(112): (vlog-2250) Function "final_report" has no return value assignment.
# -- Compiling module top
# 
# Top level modules:
# 	top
# End time: 17:34:04 on Apr 23,2024, Elapsed time: 0:00:00
# Errors: 0, Warnings: 2
# vsim -novopt -quiet -nocoverage "+notimingchecks" "+nowarnTSCALE" -sva top -GTEST_NAME=case3_c -GWR_NR=50 -GSEED_VALUE=132312 -GRD_NR=32 -GWRITE_ORDER=0 -GREAD_ORDER=1 
# Start time: 17:34:04 on Apr 23,2024
# 
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# Writing to register location 0: 
#   opcode = 0 (ZERO)
#   operand_a = -15
#   operand_b = 1
# 
# FROM DUT:
# operand_a  = -15
# operand_b  = 1
# opcode  = 0 (ZERO)
# WRITE_POINTER=0
# rezultat  = 0
# Writing to register location 1: 
#   opcode = 5 (MULT)
#   operand_a = -7
#   operand_b = 3
# 
# FROM DUT:
# operand_a  = -7
# operand_b  = 3
# opcode  = 5 (MULT)
# WRITE_POINTER=1
# rezultat  = -21
# Writing to register location 2: 
#   opcode = 4 (SUB)
#   operand_a = 9
#   operand_b = 11
# 
# FROM DUT:
# operand_a  = 9
# operand_b  = 11
# opcode  = 4 (SUB)
# WRITE_POINTER=2
# rezultat  = -2
# Writing to register location 3: 
#   opcode = 5 (MULT)
#   operand_a = -2
#   operand_b = 14
# 
# FROM DUT:
# operand_a  = -2
# operand_b  = 14
# opcode  = 5 (MULT)
# WRITE_POINTER=3
# rezultat  = -28
# Writing to register location 4: 
#   opcode = 7 (MOD)
#   operand_a = -3
#   operand_b = 13
# 
# FROM DUT:
# operand_a  = -3
# operand_b  = 13
# opcode  = 7 (MOD)
# WRITE_POINTER=4
# rezultat  = -3
# Writing to register location 5: 
#   opcode = 8 (POW)
#   operand_a = 3
#   operand_b = 6
# 
# FROM DUT:
# operand_a  = 3
# operand_b  = 6
# opcode  = 8 (POW)
# WRITE_POINTER=5
# rezultat  = 729
# Writing to register location 6: 
#   opcode = 8 (POW)
#   operand_a = 9
#   operand_b = 15
# 
# FROM DUT:
# operand_a  = 9
# operand_b  = 15
# opcode  = 8 (POW)
# WRITE_POINTER=6
# rezultat  = 205891132094649
# Writing to register location 7: 
#   opcode = 1 (PASSA)
#   operand_a = 1
#   operand_b = 4
# 
# FROM DUT:
# operand_a  = 1
# operand_b  = 4
# opcode  = 1 (PASSA)
# WRITE_POINTER=7
# rezultat  = 1
# Writing to register location 8: 
#   opcode = 7 (MOD)
#   operand_a = 6
#   operand_b = 0
# 
# FROM DUT:
# operand_a  = 6
# operand_b  = 0
# opcode  = 7 (MOD)
# WRITE_POINTER=8
# rezultat  = 0
# Writing to register location 9: 
#   opcode = 0 (ZERO)
#   operand_a = -5
#   operand_b = 3
# 
# FROM DUT:
# operand_a  = -5
# operand_b  = 3
# opcode  = 0 (ZERO)
# WRITE_POINTER=9
# rezultat  = 0
# Writing to register location 10: 
#   opcode = 8 (POW)
#   operand_a = 11
#   operand_b = 5
# 
# FROM DUT:
# operand_a  = 11
# operand_b  = 5
# opcode  = 8 (POW)
# WRITE_POINTER=10
# rezultat  = 161051
# Writing to register location 11: 
#   opcode = 0 (ZERO)
#   operand_a = -14
#   operand_b = 4
# 
# FROM DUT:
# operand_a  = -14
# operand_b  = 4
# opcode  = 0 (ZERO)
# WRITE_POINTER=11
# rezultat  = 0
# Writing to register location 12: 
#   opcode = 3 (ADD)
#   operand_a = -11
#   operand_b = 15
# 
# FROM DUT:
# operand_a  = -11
# operand_b  = 15
# opcode  = 3 (ADD)
# WRITE_POINTER=12
# rezultat  = 4
# Writing to register location 13: 
#   opcode = 0 (ZERO)
#   operand_a = 10
#   operand_b = 8
# 
# FROM DUT:
# operand_a  = 10
# operand_b  = 8
# opcode  = 0 (ZERO)
# WRITE_POINTER=13
# rezultat  = 0
# Writing to register location 14: 
#   opcode = 1 (PASSA)
#   operand_a = -5
#   operand_b = 10
# 
# FROM DUT:
# operand_a  = -5
# operand_b  = 10
# opcode  = 1 (PASSA)
# WRITE_POINTER=14
# rezultat  = -5
# Writing to register location 15: 
#   opcode = 6 (DIV)
#   operand_a = 3
#   operand_b = 12
# 
# FROM DUT:
# operand_a  = 3
# operand_b  = 12
# opcode  = 6 (DIV)
# WRITE_POINTER=15
# rezultat  = 0
# Writing to register location 16: 
#   opcode = 4 (SUB)
#   operand_a = 5
#   operand_b = 11
# 
# FROM DUT:
# operand_a  = 5
# operand_b  = 11
# opcode  = 4 (SUB)
# WRITE_POINTER=16
# rezultat  = -6
# Writing to register location 17: 
#   opcode = 7 (MOD)
#   operand_a = -7
#   operand_b = 2
# 
# FROM DUT:
# operand_a  = -7
# operand_b  = 2
# opcode  = 7 (MOD)
# WRITE_POINTER=17
# rezultat  = -1
# Writing to register location 18: 
#   opcode = 1 (PASSA)
#   operand_a = 12
#   operand_b = 2
# 
# FROM DUT:
# operand_a  = 12
# operand_b  = 2
# opcode  = 1 (PASSA)
# WRITE_POINTER=18
# rezultat  = 12
# Writing to register location 19: 
#   opcode = 8 (POW)
#   operand_a = 4
#   operand_b = 1
# 
# FROM DUT:
# operand_a  = 4
# operand_b  = 1
# opcode  = 8 (POW)
# WRITE_POINTER=19
# rezultat  = 4
# Writing to register location 20: 
#   opcode = 0 (ZERO)
#   operand_a = -8
#   operand_b = 2
# 
# FROM DUT:
# operand_a  = -8
# operand_b  = 2
# opcode  = 0 (ZERO)
# WRITE_POINTER=20
# rezultat  = 0
# Writing to register location 21: 
#   opcode = 4 (SUB)
#   operand_a = -8
#   operand_b = 7
# 
# FROM DUT:
# operand_a  = -8
# operand_b  = 7
# opcode  = 4 (SUB)
# WRITE_POINTER=21
# rezultat  = -15
# Writing to register location 22: 
#   opcode = 8 (POW)
#   operand_a = 2
#   operand_b = 10
# 
# FROM DUT:
# operand_a  = 2
# operand_b  = 10
# opcode  = 8 (POW)
# WRITE_POINTER=22
# rezultat  = 1024
# Writing to register location 23: 
#   opcode = 2 (PASSB)
#   operand_a = -15
#   operand_b = 12
# 
# FROM DUT:
# operand_a  = -15
# operand_b  = 12
# opcode  = 2 (PASSB)
# WRITE_POINTER=23
# rezultat  = 12
# Writing to register location 24: 
#   opcode = 1 (PASSA)
#   operand_a = 13
#   operand_b = 5
# 
# FROM DUT:
# operand_a  = 13
# operand_b  = 5
# opcode  = 1 (PASSA)
# WRITE_POINTER=24
# rezultat  = 13
# Writing to register location 25: 
#   opcode = 8 (POW)
#   operand_a = 10
#   operand_b = 5
# 
# FROM DUT:
# operand_a  = 10
# operand_b  = 5
# opcode  = 8 (POW)
# WRITE_POINTER=25
# rezultat  = 100000
# Writing to register location 26: 
#   opcode = 7 (MOD)
#   operand_a = 5
#   operand_b = 4
# 
# FROM DUT:
# operand_a  = 5
# operand_b  = 4
# opcode  = 7 (MOD)
# WRITE_POINTER=26
# rezultat  = 1
# Writing to register location 27: 
#   opcode = 4 (SUB)
#   operand_a = 13
#   operand_b = 4
# 
# FROM DUT:
# operand_a  = 13
# operand_b  = 4
# opcode  = 4 (SUB)
# WRITE_POINTER=27
# rezultat  = 9
# Writing to register location 28: 
#   opcode = 0 (ZERO)
#   operand_a = 12
#   operand_b = 0
# 
# FROM DUT:
# operand_a  = 12
# operand_b  = 0
# opcode  = 0 (ZERO)
# WRITE_POINTER=28
# rezultat  = 0
# Writing to register location 29: 
#   opcode = 2 (PASSB)
#   operand_a = -8
#   operand_b = 14
# 
# FROM DUT:
# operand_a  = -8
# operand_b  = 14
# opcode  = 2 (PASSB)
# WRITE_POINTER=29
# rezultat  = 14
# Writing to register location 30: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 1
# 
# FROM DUT:
# operand_a  = 2
# operand_b  = 1
# opcode  = 1 (PASSA)
# WRITE_POINTER=30
# rezultat  = 2
# Writing to register location 31: 
#   opcode = 4 (SUB)
#   operand_a = -14
#   operand_b = 4
# 
# FROM DUT:
# operand_a  = -14
# operand_b  = 4
# opcode  = 4 (SUB)
# WRITE_POINTER=31
# rezultat  = -18
# Writing to register location 0: 
#   opcode = 0 (ZERO)
#   operand_a = 13
#   operand_b = 11
# 
# FROM DUT:
# operand_a  = 13
# operand_b  = 11
# opcode  = 0 (ZERO)
# WRITE_POINTER=0
# rezultat  = 0
# Writing to register location 1: 
#   opcode = 7 (MOD)
#   operand_a = -1
#   operand_b = 4
# 
# FROM DUT:
# operand_a  = -1
# operand_b  = 4
# opcode  = 7 (MOD)
# WRITE_POINTER=1
# rezultat  = -1
# Writing to register location 2: 
#   opcode = 6 (DIV)
#   operand_a = 3
#   operand_b = 1
# 
# FROM DUT:
# operand_a  = 3
# operand_b  = 1
# opcode  = 6 (DIV)
# WRITE_POINTER=2
# rezultat  = 3
# Writing to register location 3: 
#   opcode = 4 (SUB)
#   operand_a = 3
#   operand_b = 9
# 
# FROM DUT:
# operand_a  = 3
# operand_b  = 9
# opcode  = 4 (SUB)
# WRITE_POINTER=3
# rezultat  = -6
# Writing to register location 4: 
#   opcode = 4 (SUB)
#   operand_a = 8
#   operand_b = 12
# 
# FROM DUT:
# operand_a  = 8
# operand_b  = 12
# opcode  = 4 (SUB)
# WRITE_POINTER=4
# rezultat  = -4
# Writing to register location 5: 
#   opcode = 6 (DIV)
#   operand_a = 6
#   operand_b = 6
# 
# FROM DUT:
# operand_a  = 6
# operand_b  = 6
# opcode  = 6 (DIV)
# WRITE_POINTER=5
# rezultat  = 1
# Writing to register location 6: 
#   opcode = 1 (PASSA)
#   operand_a = -11
#   operand_b = 1
# 
# FROM DUT:
# operand_a  = -11
# operand_b  = 1
# opcode  = 1 (PASSA)
# WRITE_POINTER=6
# rezultat  = -11
# Writing to register location 7: 
#   opcode = 7 (MOD)
#   operand_a = -6
#   operand_b = 2
# 
# FROM DUT:
# operand_a  = -6
# operand_b  = 2
# opcode  = 7 (MOD)
# WRITE_POINTER=7
# rezultat  = 0
# Writing to register location 8: 
#   opcode = 0 (ZERO)
#   operand_a = -13
#   operand_b = 9
# 
# FROM DUT:
# operand_a  = -13
# operand_b  = 9
# opcode  = 0 (ZERO)
# WRITE_POINTER=8
# rezultat  = 0
# Writing to register location 9: 
#   opcode = 2 (PASSB)
#   operand_a = 9
#   operand_b = 9
# 
# FROM DUT:
# operand_a  = 9
# operand_b  = 9
# opcode  = 2 (PASSB)
# WRITE_POINTER=9
# rezultat  = 9
# Writing to register location 10: 
#   opcode = 5 (MULT)
#   operand_a = 10
#   operand_b = 8
# 
# FROM DUT:
# operand_a  = 10
# operand_b  = 8
# opcode  = 5 (MULT)
# WRITE_POINTER=10
# rezultat  = 80
# Writing to register location 11: 
#   opcode = 2 (PASSB)
#   operand_a = -15
#   operand_b = 8
# 
# FROM DUT:
# operand_a  = -15
# operand_b  = 8
# opcode  = 2 (PASSB)
# WRITE_POINTER=11
# rezultat  = 8
# Writing to register location 12: 
#   opcode = 1 (PASSA)
#   operand_a = -9
#   operand_b = 11
# 
# FROM DUT:
# operand_a  = -9
# operand_b  = 11
# opcode  = 1 (PASSA)
# WRITE_POINTER=12
# rezultat  = -9
# Writing to register location 13: 
#   opcode = 2 (PASSB)
#   operand_a = -3
#   operand_b = 4
# 
# FROM DUT:
# operand_a  = -3
# operand_b  = 4
# opcode  = 2 (PASSB)
# WRITE_POINTER=13
# rezultat  = 4
# Writing to register location 14: 
#   opcode = 5 (MULT)
#   operand_a = 7
#   operand_b = 0
# 
# FROM DUT:
# operand_a  = 7
# operand_b  = 0
# opcode  = 5 (MULT)
# WRITE_POINTER=14
# rezultat  = 0
# Writing to register location 15: 
#   opcode = 3 (ADD)
#   operand_a = 0
#   operand_b = 13
# 
# FROM DUT:
# operand_a  = 0
# operand_b  = 13
# opcode  = 3 (ADD)
# WRITE_POINTER=15
# rezultat  = 13
# Writing to register location 16: 
#   opcode = 7 (MOD)
#   operand_a = -8
#   operand_b = 5
# 
# FROM DUT:
# operand_a  = -8
# operand_b  = 5
# opcode  = 7 (MOD)
# WRITE_POINTER=16
# rezultat  = -3
# Writing to register location 17: 
#   opcode = 0 (ZERO)
#   operand_a = -11
#   operand_b = 10
# 
# FROM DUT:
# operand_a  = -11
# operand_b  = 10
# opcode  = 0 (ZERO)
# WRITE_POINTER=17
# rezultat  = 0
# 
# Reading back the same register locations written...
# Read from register location 0: 
#   opcode = 0 (ZERO)
#   operand_a = 13
#   operand_b = 11
# 
#   rezultat = 0
# 
# operand_a = 13
# operand_b = 11
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: 0
# Rezultatul stocat: 0
# Read from register location 31: 
#   opcode = 4 (SUB)
#   operand_a = -14
#   operand_b = 4
# 
#   rezultat = -18
# 
# operand_a = -14
# operand_b = 4
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: -18
# Rezultatul stocat: -18
# Read from register location 30: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 1
# 
#   rezultat = 2
# 
# operand_a = 2
# operand_b = 1
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: 2
# Rezultatul stocat: 2
# Read from register location 29: 
#   opcode = 2 (PASSB)
#   operand_a = -8
#   operand_b = 14
# 
#   rezultat = 14
# 
# operand_a = -8
# operand_b = 14
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: 14
# Rezultatul stocat: 14
# Read from register location 28: 
#   opcode = 0 (ZERO)
#   operand_a = 12
#   operand_b = 0
# 
#   rezultat = 0
# 
# operand_a = 12
# operand_b = 0
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: 0
# Rezultatul stocat: 0
# Read from register location 27: 
#   opcode = 4 (SUB)
#   operand_a = 13
#   operand_b = 4
# 
#   rezultat = 9
# 
# operand_a = 13
# operand_b = 4
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: 9
# Rezultatul stocat: 9
# Read from register location 26: 
#   opcode = 7 (MOD)
#   operand_a = 5
#   operand_b = 4
# 
#   rezultat = 1
# 
# operand_a = 5
# operand_b = 4
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: 1
# Rezultatul stocat: 1
# Read from register location 25: 
#   opcode = 8 (POW)
#   operand_a = 10
#   operand_b = 5
# 
#   rezultat = 100000
# 
# operand_a = 10
# operand_b = 5
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: 100000
# Rezultatul stocat: 100000
# Read from register location 24: 
#   opcode = 1 (PASSA)
#   operand_a = 13
#   operand_b = 5
# 
#   rezultat = 13
# 
# operand_a = 13
# operand_b = 5
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: 13
# Rezultatul stocat: 13
# Read from register location 23: 
#   opcode = 2 (PASSB)
#   operand_a = -15
#   operand_b = 12
# 
#   rezultat = 12
# 
# operand_a = -15
# operand_b = 12
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: 12
# Rezultatul stocat: 12
# Read from register location 22: 
#   opcode = 8 (POW)
#   operand_a = 2
#   operand_b = 10
# 
#   rezultat = 1024
# 
# operand_a = 2
# operand_b = 10
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: 1024
# Rezultatul stocat: 1024
# Read from register location 21: 
#   opcode = 4 (SUB)
#   operand_a = -8
#   operand_b = 7
# 
#   rezultat = -15
# 
# operand_a = -8
# operand_b = 7
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: -15
# Rezultatul stocat: -15
# Read from register location 20: 
#   opcode = 0 (ZERO)
#   operand_a = -8
#   operand_b = 2
# 
#   rezultat = 0
# 
# operand_a = -8
# operand_b = 2
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: 0
# Rezultatul stocat: 0
# Read from register location 19: 
#   opcode = 8 (POW)
#   operand_a = 4
#   operand_b = 1
# 
#   rezultat = 4
# 
# operand_a = 4
# operand_b = 1
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: 4
# Rezultatul stocat: 4
# Read from register location 18: 
#   opcode = 1 (PASSA)
#   operand_a = 12
#   operand_b = 2
# 
#   rezultat = 12
# 
# operand_a = 12
# operand_b = 2
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: 12
# Rezultatul stocat: 12
# Read from register location 17: 
#   opcode = 0 (ZERO)
#   operand_a = -11
#   operand_b = 10
# 
#   rezultat = 0
# 
# operand_a = -11
# operand_b = 10
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: 0
# Rezultatul stocat: 0
# Read from register location 16: 
#   opcode = 7 (MOD)
#   operand_a = -8
#   operand_b = 5
# 
#   rezultat = -3
# 
# operand_a = -8
# operand_b = 5
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: -3
# Rezultatul stocat: -3
# Read from register location 15: 
#   opcode = 3 (ADD)
#   operand_a = 0
#   operand_b = 13
# 
#   rezultat = 13
# 
# operand_a = 0
# operand_b = 13
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: 13
# Rezultatul stocat: 13
# Read from register location 14: 
#   opcode = 5 (MULT)
#   operand_a = 7
#   operand_b = 0
# 
#   rezultat = 0
# 
# operand_a = 7
# operand_b = 0
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: 0
# Rezultatul stocat: 0
# Read from register location 13: 
#   opcode = 2 (PASSB)
#   operand_a = -3
#   operand_b = 4
# 
#   rezultat = 4
# 
# operand_a = -3
# operand_b = 4
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: 4
# Rezultatul stocat: 4
# Read from register location 12: 
#   opcode = 1 (PASSA)
#   operand_a = -9
#   operand_b = 11
# 
#   rezultat = -9
# 
# operand_a = -9
# operand_b = 11
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: -9
# Rezultatul stocat: -9
# Read from register location 11: 
#   opcode = 2 (PASSB)
#   operand_a = -15
#   operand_b = 8
# 
#   rezultat = 8
# 
# operand_a = -15
# operand_b = 8
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: 8
# Rezultatul stocat: 8
# Read from register location 10: 
#   opcode = 5 (MULT)
#   operand_a = 10
#   operand_b = 8
# 
#   rezultat = 80
# 
# operand_a = 10
# operand_b = 8
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: 80
# Rezultatul stocat: 80
# Read from register location 9: 
#   opcode = 2 (PASSB)
#   operand_a = 9
#   operand_b = 9
# 
#   rezultat = 9
# 
# operand_a = 9
# operand_b = 9
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: 9
# Rezultatul stocat: 9
# Read from register location 8: 
#   opcode = 0 (ZERO)
#   operand_a = -13
#   operand_b = 9
# 
#   rezultat = 0
# 
# operand_a = -13
# operand_b = 9
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: 0
# Rezultatul stocat: 0
# Read from register location 7: 
#   opcode = 7 (MOD)
#   operand_a = -6
#   operand_b = 2
# 
#   rezultat = 0
# 
# operand_a = -6
# operand_b = 2
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: 0
# Rezultatul stocat: 0
# Read from register location 6: 
#   opcode = 1 (PASSA)
#   operand_a = -11
#   operand_b = 1
# 
#   rezultat = -11
# 
# operand_a = -11
# operand_b = 1
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: -11
# Rezultatul stocat: -11
# Read from register location 5: 
#   opcode = 6 (DIV)
#   operand_a = 6
#   operand_b = 6
# 
#   rezultat = 1
# 
# operand_a = 6
# operand_b = 6
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: 1
# Rezultatul stocat: 1
# Read from register location 4: 
#   opcode = 4 (SUB)
#   operand_a = 8
#   operand_b = 12
# 
#   rezultat = -4
# 
# operand_a = 8
# operand_b = 12
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: -4
# Rezultatul stocat: -4
# Read from register location 3: 
#   opcode = 4 (SUB)
#   operand_a = 3
#   operand_b = 9
# 
#   rezultat = -6
# 
# operand_a = 3
# operand_b = 9
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: -6
# Rezultatul stocat: -6
# Read from register location 2: 
#   opcode = 6 (DIV)
#   operand_a = 3
#   operand_b = 1
# 
#   rezultat = 3
# 
# operand_a = 3
# operand_b = 1
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: 3
# Rezultatul stocat: 3
# Read from register location 1: 
#   opcode = 7 (MOD)
#   operand_a = -1
#   operand_b = 4
# 
#   rezultat = -1
# 
# operand_a = -1
# operand_b = 4
# opcode = 0 (ZERO)
# Rezultate asemanatoare
# Rezultatul calculat: -1
# Rezultatul stocat: -1
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH (YET).  YOU  *******
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# ** Note: $finish    : ../lab01_testbench-interface/instr_register_test.sv(107)
#    Time: 856 ns  Iteration: 1  Instance: /top/test
# End time: 17:34:06 on Apr 23,2024, Elapsed time: 0:00:02
# Errors: 0, Warnings: 0
